{"version":3,"sources":["components/Filter.js","components/AddContact.js","components/Contacts.js","services/contacts.js","App.js","index.js"],"names":["Filter","value","onChange","AddContact","newName","handleNameChange","newNumber","handleNumberChange","addNewContact","type","onClick","Contact","name","number","Contacts","filter","contacts","deleteRef","toLowerCase","search","toShow","map","c","key","id","rows","baseUrl","axios","get","then","response","data","newContact","post","newObject","put","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","message","setMessage","useEffect","contactService","showSuccessMessage","text","className","setTimeout","showErrorMessage","event","target","preventDefault","contactToUpdate","find","entry","window","confirm","updatedContact","e","catch","error","p","returnedContact","concat","contact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d090b155.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({value, onChange}) => \n  <p>filter shown with <input \n    value={value} \n    onChange={onChange}/>\n  </p>\n\nexport default Filter","import React from 'react'\n\nconst AddContact = (\n  {\n    newName, handleNameChange,\n    newNumber, handleNumberChange,\n    addNewContact\n  }) =>\n  <form>\n    <div>\n      name: <input \n        value={newName} \n        onChange={handleNameChange} \n          />\n    </div>\n    <div>\n      number: <input \n        value={newNumber} \n        onChange={handleNumberChange} \n          />\n    </div>\n    <div>\n      <button type=\"submit\" onClick={addNewContact}>add</button>\n    </div>\n  </form>\n\nexport default AddContact","import React from 'react'\n\nconst Contact = ({name, number, onClick }) => (\n  <li>{name} {number} <button onClick={onClick}>delete</button></li>\n)\n\nconst toShow = (filter, contacts) => contacts.filter(({name, number}) => \n  name.toLowerCase().search(filter) !== -1\n  || number.search(filter) !== -1)\n\nconst rows = (filter, contacts, deleteRef) => \n  toShow(filter, contacts).map(c => <Contact \n      key={c.id} \n      name={c.name} \n      number={c.number} \n      onClick={() => deleteRef(c)} />)\n   \nconst Contacts = ({filter, contacts, deleteRef}) => {\n  return <ul> \n      {rows(filter, contacts, deleteRef)}\n    </ul>\n}\n\nexport default Contacts","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => \n  axios.get(baseUrl).then(response => response.data)\n\nconst create = newContact => \n  axios.post(baseUrl, newContact)\n    .then(response => response.data)\n\nconst update = (id, newObject) => \n  axios.put(`${baseUrl}/${id}`, newObject)\n    .then(response => response.data)\n\nconst deleteContact = id => \n  axios.delete(`${baseUrl}/${id}`)\n    .then(response => response.data)\n  \nexport default { getAll, create, update, delete: deleteContact }\n","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport AddContact from './components/AddContact'\nimport Contacts from './components/Contacts'\nimport contactService from './services/contacts'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter] = useState('')\n\n  const [ message, setMessage ] = useState(null)\n\n  useEffect(() => {\n    contactService.getAll()\n      .then(data => setPersons(data))\n  }, [])\n\n  const findByName = (name) => \n    (entry) => entry.name === name  \n\n  const handleNameChange = (event) => \n    setNewName(event.target.value)\n  const handleNumberChange = (event) => \n    setNewNumber(event.target.value)\n  const handleFilterChange = (event) => \n    setFilter(event.target.value.toLowerCase())\n\n  const showSuccessMessage = text => {\n    setMessage({\n      text,\n      className: 'success'\n    })\n    setTimeout(setMessage, 5000, null)\n  }\n  const showErrorMessage = text => {\n    setMessage({\n      text,\n      className: 'error'\n    })\n    setTimeout(setMessage, 5000, null)\n  }\n\n  const createOrUpdateContact = (event) => {\n    event.preventDefault();\n    const contactToUpdate = persons.find(findByName(newName))\n    if (!contactToUpdate) {\n      contactService.create({ \n        name: newName, \n        number: newNumber\n      }).then(returnedContact => {\n        showSuccessMessage(`Added ${newName}`)\n        setPersons(persons.concat(returnedContact))\n        setNewNumber('')\n        setNewName('')\n      })\n    } else if (window.confirm(`${newName} is already added to phonebook, \n      replace the old number with the new one?`)) {\n      contactService.update(contactToUpdate.id, {\n        name: newName,\n        number: newNumber \n      }).then(updatedContact => {\n        showSuccessMessage(`Updated ${newName}`)\n        setPersons(persons.map(e => e.id !== contactToUpdate.id \n          ? e : updatedContact))\n      }).catch(error => {\n        showErrorMessage(`Note ${newName} was already removed from server`)\n        setPersons(persons.filter(p => p.id !== contactToUpdate.id))\n      })\n    } \n  }\n  \n  const deleteContact = contact => {\n    if(window.confirm(`Delete ${contact.name}?`)) {\n      contactService\n        .delete(contact.id)\n        .then(setPersons(persons.filter(e => e.id !== contact.id)))\n        .catch(error => {\n          showErrorMessage(`Note ${newName} was already removed from server`)\n          setPersons(persons.filter(e => e.id !== contact.id))\n      })\n    }\n  }\n\n  const Notification = ({ message }) => {\n    if(message === null) return null\n    return (\n      <div className={message.className}>\n        {message.text}\n      </div>\n    )\n  }  \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      \n      <Notification message={message} />\n      \n      <Filter value={filter} onChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <AddContact\n        newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange}\n        addNewContact={createOrUpdateContact}\n      />\n      <h3>Contacts</h3>\n      <Contacts filter={filter} contacts={persons} deleteRef={deleteContact}/>\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}